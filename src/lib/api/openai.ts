
// OpenAI API service for SecondBrain AI
import { toast } from "sonner";

// Note: In production, this key should be stored securely on the backend
const OPENAI_API_KEY = "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";

export interface SummaryRequest {
  content: string;
  contentType: 'pdf' | 'video' | 'email' | 'article';
  title?: string;
}

export interface SummaryResponse {
  summary: string;
  keyPoints: string[];
  actionItems: string[];
}

export const openaiService = {
  // Summarize content using OpenAI
  summarize: async (request: SummaryRequest): Promise<SummaryResponse> => {
    try {
      // In a real implementation, this would be a backend call
      console.log("Summarizing with OpenAI:", request);
      
      // For demo purposes, simulate API response
      // In production, handle this on backend with proper API call
      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay
      
      // Generate simulated response based on content type
      let mockResponse: SummaryResponse;
      
      switch (request.contentType) {
        case 'pdf':
          mockResponse = {
            summary: `This is a simulated summary of the PDF document. It would contain a concise version of the key information from the PDF, processed by OpenAI's GPT model.`,
            keyPoints: [
              "First key point extracted from the PDF",
              "Second important concept from the document",
              "Third significant insight found in the content"
            ],
            actionItems: [
              "Review section 3.2 for implementation details",
              "Follow up on the recommendations in the conclusion"
            ]
          };
          break;
        case 'video':
          mockResponse = {
            summary: `This is a simulated summary of the YouTube video. It would contain the main points discussed in the video, based on transcript analysis by OpenAI.`,
            keyPoints: [
              "Main topic introduced at 1:45",
              "Key demonstration shown at 7:32",
              "Conclusion and takeaways from 12:15"
            ],
            actionItems: [
              "Try the technique shown at 5:20",
              "Check the resources mentioned in the description"
            ]
          };
          break;
        default:
          mockResponse = {
            summary: `This is a simulated summary of the ${request.contentType}. In a production environment, this would be generated by OpenAI based on the actual content.`,
            keyPoints: [
              "First extracted key point",
              "Second important concept",
              "Third significant insight"
            ],
            actionItems: [
              "Suggested action item 1",
              "Suggested action item 2"
            ]
          };
      }
      
      return mockResponse;
    } catch (error) {
      console.error("OpenAI API error:", error);
      toast.error("Failed to generate summary. Please try again.");
      throw error;
    }
  },
  
  // Generate embeddings for semantic search
  generateEmbedding: async (text: string): Promise<number[]> => {
    try {
      // In a real implementation, this would be a backend call
      console.log("Generating embedding for:", text.substring(0, 50) + "...");
      
      // Simulate embedding generation (would be done by OpenAI API)
      // In production, this would return actual embeddings from the API
      return Array(1536).fill(0).map(() => Math.random() * 2 - 1);
    } catch (error) {
      console.error("Embedding generation error:", error);
      throw error;
    }
  }
};

